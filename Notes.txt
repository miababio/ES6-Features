                                    NOTES
                                    -----
                                    
Getting Setup
    - ES6 also known as ES2015
    - Babel
        - Module that let's us convert our ES6 code into compatible code for Node/browsers (ES5?)
        - Global install (latest)
        - NOTE: Because we have a higher version of Node (7.4.0), it already comes built-in with ES6 features, meaning we won't need babel
            - Still follow along anyways though
    
Project Setup
    - Right now naming convention has been standard (ES1, 2, 3, etc.)
    - Also called ECMAScript
    - New way of naming ECMAScript is by year, which is why ES6 is a.k.a ES2015, and so on
    - babel-presets (deprecated, should use babel-presets-env)
    - Defaults
        - One thing we can do now is set a default value for an argument
        - When a function is called and a parameter isn't passed in, you can give the argument a default value in the called function
            - Just like C++, VB, etc. (bout time!)
      
        - Ex: function sayHello(name = "World") {
                 console.log("Hello " + name + "!");
              }
              sayHello();

        - If you had an earlier version of Node ( <5 ) then you couldn't run this in the terminal normally; It would crash
            - You would be trying to use an ES6 feature that wasn't built into Node back then
            - To fix, use Babel to run the code instead of node, like so:
                - babel-node .\features\default.js --presets es2015 
            - Works with default Objects as well
                
                - Ex: function greetUser (user = {name: "Anonymous"}) {
                          console.log("Hello " + user.name + "!");
                      }
  
                      greetUser();                  // Displays 'Hello Anonymous!'
                      greetUser({name: "John"});    // Displays 'Hello John!'

            - To run the babel-node command easier, we can create a config file to do it for us to remove the presets part at least
                - .babelrc
                    - Inside, set the presets to ["es2015"]
                    - NOTE: This is still the deprecated way; Look online on Babel site for new configuration
                - Now in the Terminal we can just type -> babel-node .\features\default.js and it works the same way as before

Nodemon
    - Nodemon = "Node Monitoring" (who knew?)
    - Let's you automatically rerun files once you save a change
    - Easiest way to start something is "nodemon <file you want>"
    - Nodemon with Babel
        - nodemon --exec babel-node ./features/default.js
        - This will automatically run your file and through babel as well!
    - You don't have to run Nodemon on a single file, you can use it on projects as well!

Template Strings
    - console.log("Hello " + name + "!");
        - Old way -> Needed to concatenate strings to show a variable name, etc.
    - ES6 way -> Template Strings
        - Represented by the back tick (`)
        - We use the '${}' to put Javascript expressions in it
        - Now, the same line would look like -> console.log(`Hello ${name}!`);
    - Again, you can use template strings for any Javascript expressions
        - console.log(`1 + 6 = ${1 + 6}`); // Displays 1 + 6 = 7
    - You can also print out newlines and spaces
        - Ex: console.log(`Hey,

              This kind of looks like an email!

              - Mike
              `);

Const
    - Short for constant
    - A const value can't be changed
        - Ex: const PORT = 3000;
              PORT = 3001; // Throws Error
    - Like other languages, you can't have multiple declarations of the same variable name either; It also throws an Error
        - Ex: const PORT = 3000;
              var PORT = 3001; // Throws Error
    - You don't have to use numbers for const-you can use objects as well!
        - NOTE: Although an Object itself will be constant when declared, an object's attributes are NOT constant, and can STILL BE MODIFIED if you wish
            - See Example 1
                - So a reminder, you can't change the variable, but you CAN change an objects' properties

Let
    - Defines a variable at the block level (if statements, for-loops, etc.)
    - Without Let
        - Ex: var x = 0;

            if(true) {
                var x = 12;
                console.log(x); // Displays 12
            }
    
            console.log(x);     // Displays 12

            - This is to be expected. We make 'x' in the beginning, and then since 'x' is already defined when we try to declare
              it in the if statement, x now becomes 12 everywhere

    - With Let
        - Ex: var x = 0;

            if(true) {
                let x = 12;
                console.log(x); // Displays 12
            }
    
            console.log(x);     // Displays 0

            - This is the power of let. The 'x' variable declared by let is only visible/known within the if statement.
              That's why the outer 'x' still remains - when we get out of the if block

    - var variables in a function are known/available everywhere, regardless of where it's made
    - If you use 'let' on the Global level, there is no block/scope level, so it acts the same way as var-you can access that variable anywhere
        - It's only really effective at the block level
    - Let with a For-Loop
        - See Example 2
    - Let with a function
        - See Example 3
            - Note: Even though let is declared in the genCallback block, INNER function still have access to that variable; anything OUTSIDE the outer
              block does NOT
                - In this case, 'var' would've done the same thing, so in this case, they are both fine

Rest & Spread Operators
    - Rest/Spread deal with using arrays mostly
    - Here we have a basic add function
        - function add(a, b) {
             return a + b;
          }
    - Right now, there's nothing special about it
    - Spread let's us "spread out" an array's contents, so we can pass in our two arguments using one array
        - See Example 4
            - add(...numbers)
                - The format for spread is an ellipses, followed by either an array after the dots (...[]), or a variable name instead (...numbers)
                - This means to take the contents of numbers, and apply them to the add function
        - We can also use the spread operator when creating an array

            - Ex: var groupA = [33, 99];
                  var groupB = [11];
                  var unified = [0, ...groupA, ...groupB, 100];  
                  console.log(unified); // Displays [ 0, 33, 99, 11, 100 ]

        - We can use Array methods and pass in the spread operator as well
            - Ex: unified.push(...[55, 33]); // Now whole array displays [ 0, 33, 99, 11, 100, 55, 33 ]

    - Rest (rest params) are used inside of your function definition
        - See Example 5 
            - We are able to pass in all of those names separately, (instead of passing an array) because of rest params
            - Using the "...names" parameter, we're able to pass in all of our arguments as an array
        - You can have other arguments before the array
            - Ex: function greetUsers(group, ...names) {...}
                - This means that the first argument will be set to 'group', and then every subsequent argument will be added to the names array
    - Remember, Rest and Spread dont have to work for just numbers; They can be used for Strings, Objects, etc. as well
        - As long as you pass/use an array, the contents of the array can be whatever you want

Arrow Functions
    - var people = ['Andrew', 'Mike', 'John', 'Jen'];

      people.forEach(function(name) {
          console.log(name);
      });

    - In cases like above, Arrow functions let us replace anonymous functions
        - Ex: people.forEach((name) => console.log(name));
            - For arrow functions, you don't need the word 'function' anymore, just te parameters, followed by the '=>' arrow, and then you either have a block of statements, or just one line
                - Since all we did was console.log this time, we could put it on one line
        - Both functions are identical
    - Another thing about arrow functions is that you can make really short functions, if they are one-liners
        - See Example 6
            - var add = (a, b) => a + b;
                - When you have a one line statement, and don't have the curly braces around it, Javascript will automatically make that a return statement
                    - This is considered an Implicit return
                    - An Explicit return would look like this -> var add = (a, b) => { return a + b; }
                        - This one is used for multi-line stuff usually, vs. a one-liner
    - Another thing about arrow functions is that when you use them, the 'this' keyword doesn't lose it's binding
        - var person = {
              name: 'Mike',
              likes: ['Movies', 'Programming', 'Running'],
              generateGreeter: function() {
                  return function() {
                      console.log(this.name);
                  }
              }
          }

            - As this is right now, this will fail!
                - "this.name" in the anonymous function does NOT refer to our name property we have made above
                - The workaround at the time was to create another variable, set it to 'this', and then use that other variable to get the name
                    - Ex: var that = this;
                          return function() {
                              console.log(that.name);
                          }
                          ...
                          person.generateGreeter()(); // Displays Mike

                    - New way with arrow functions -> See Example 7
                        - Inside arrow functions, you now have access to the same 'this' binding of the containing function
    - Also, just a quick note:
        - printLikes: function() {
              return () => {
                  this.likes.forEach((like) => console.log(`${this.name} likes ${like}`));
              }
          } 

          - Trying to have "printLikes: () => {...}" DOES NOT WORK
            - Can't do a double arrow like that I guess (will look into later)

For...of
    - A new way to iterate over elements in an array
    - See Example 8
        - Format -> for(<variable_name> of <array you want to loop over>) {...}
    - Pretty straightforward

Maps
    - Let's us create key/value pairs, and also comes with other utilities that might be preferred to be used over Objects

    - var myMap = new Map();
        - Creates an empty map

    - myMap.set('name', 'Mike');
        - 'set' adds a key/value pair to the map
            - Similar to HashMap.put() in Java

    - myMap.get('name')
        - Gets the value from the map, based on the key

    - myMap.has('age')
        - 'has' goes through the map and checks to see if we have this key in it. If we do, it returns true. If not, it returns false

    - myMap.delete('name');
        - Removes a key/value from the map, based on the key

    - myMap.clear();
        - Removes everything from the map

    - myMap.size
        - Returns the size of the map

    - So why would we use this over an Object?
        - For one, Map has various utilities out of the box, compared to an Object (get, set, clear, size, etc.)
        - When you create an Object, the keys HAVE to be strings; Map keys can be ANYTHING (Objects, booleans, numbers, etc.)
            - See Example 9
    - Sometimes, if we have multiple stuff in our map, we want to do something with it, such as printing everything in it all at once
    - We can do so in a couple ways:
        - 1. Use the 'spread' operation

            - Ex: var myMap = new Map();
                  myMap.set(1, 'Mike');
                  myMap.set(2, 'Jack');
                  myMap.set(3, 'Ben');
                  console.log([...myMap]); // Displays [ [ 1, 'Mike' ], [ 2, 'Jack' ], [ 3, 'Ben' ] ]

                - You get an array of arrays; In other words, you get an array with each key/value pair as an array
                - Now you could do a forEach and loop over everything and use it that way

        - 2. Use the keys() and values() methods
            - Ex: console.log(myMap.keys());   // Displays -> MapIterator { 1, 2, 3 }
            - Ex: console.log(myMap.values()); // Displays -> MapIterator { 'Mike', 'Jack', 'Ben' }

Sets
    - Has built-in similar methods to Map
    - Maps we store key, value pairs. With Sets however, we just store the value
        - It's similar to an array
        - The difference between sets and arrays (other than the methods) is that Sets CANNOT have the same value twice
            - In other words, sets only let you store unique values

    - var chatRooms = new Set();
        - Creates an empty Set

    - chatRooms.add('Runners');
        - Adds "Runners" to the set. If you tried adding it again, it wouldn't work

    - chatRooms.size;
        - Returns the current size of the Set

    - chatRooms.has('Runners')
        - Has checks to see if a value is in the set. Returns true/false

    - chatRooms.delete('Bikers');
        - Removes a single element from the set

    - chatRooms.clear();
        - Removes ALL elements in the set (like a reset)

    - You can convert your set to other data types, just like Maps
        - To an array
            - console.log([...chatRooms]); -> Returns [ 'Runners', 'Bikers' ]
            - Like Maps, you can add any value you want to the Set and it'll print all of it
                - chatRooms.add({name: 'Mike'});
                console.log([...chatRooms]); -> Returns [ 'Runners', 'Bikers', { name: 'Mike' } ]
            - If you wanted to iterate over the SEt, you could do the spread like above, then call forEach on the array from there
                - With Sets, you can also just call forEach directly on it, w/o having to do any spreads or anything like that
                    - Ex: chatRooms.forEach(function(chatRoom) {
                              console.log(`Found chat room: ${chatRoom}`);
                          }); 

New Object Features
    - Say you had the following code:

        - var age = 25;
          var person = {
              name: 'Mike',
          };
    
        - If you wanted to add age to the person Object, normally, you would add 
            - age: age
          to the Object, so it looks like this:

            - var person = {
                  name: 'Mike',
                  age: age
              };
    
    - New way to add attributes to an object is just have the name
        - Only works if the property name matches the variable name
        - For Ex: Instead of having 'age: age' like before, we could just put 'age' (looks like this -> person = {name: 'Mike', age})
        - This also works for functions too!

            - function printHello() {
                  console.log(`Hello!`);
              }
                  
  
              var person = {
                  name: 'Mike',
                  age,
                  printHello
              };

    - Another new thing we can do -> Dynamic Property Names
        - In the past, we weren't able to generate a property name based on variables. Now we can!
        - The syntax is -> [<any kind of computation>]: <value>
            - See Example 10
                - You could also use other variables as well
                    - Ex: ['hello' + (age + 2)]: 'I am here'
                          console.log(person.hello27); // Displays "I am here"

    - Last new thing we can do -> Define methods using shorthand
    - In the past, if we were going to add a method to an object, we needed to do it like so:

        - var person = {
              printAge: function() {
                  console.log(this.age);
              }
          };

    - Now for the shorthand, we don't need the colon or function keyword. It looks like this now:

        - var person = {
              printAge() {
                  console.log(this.age);
              }
          };

Classes - Part 1
    - Basic setup is similar to other languages

        - Ex: class Person {
                constructor(name) {
                    this.name = typeof name === 'string' ? name : 'Anonymous';
                }
                printGreeting() {
                    console.log(`Hi! I'm ${this.name}!`);
                }
                static capitalizeWord(word) {
                    return word[0].toUpperCase() + word.slice(1);
                }
            }

            - You'll notice we don't need to declare a variable right away. We can do "this.<something>" to create it
            - To use this class, we instantiate it with the "new" keyword

                - Ex: var person1 = new Person('Mike');
                      person1.printGreeting(); // Displays "Hi! I'm Mike!"

            - Just like regular methods, you can add static methods as well
                - Static methods don't require you to instantiate the class before you can use it (Like Java, C++, etc.)
                    - Ex: console.log(Person.capitalizeWord('mike')); // Returns "Mike"
            - Note: You can also use static methods within your class, but you call it the same way you would before-without instantiating

                - Ex: constructor(name) {
                          this.name = typeof name === 'string' ? Person.capitalizeWord(name) : 'Anonymous';
                      }
                      ...
                      var person1 = new Person('mike');
                      person1.printGreeting(); // Displays "Hi! I'm Mike!"

Classes - Part 2
    - We can add custom getter/setter methods to classes, and objects as well
    - Right now, looking at out Person class we made before, there are a few issues that we have with it
        - Say for example, we had the following:

            - var person1 = new Person('mike');
              person1.name = 'jen';
              person1.printGreeting(); // Displays "Hi! I'm jen!"

                - 'jen' does not get capitalized, because we only set 'name' in the constructor. If we wanted ot capitalize it, we'd have to call the static method we made on another line
                    - This can get really tedious if we have to keep doing that everywhere
            - Using a setter method can fix this
                - SYNTAX: set <property name> (<argument, usually just val or value>) { ... }
            - Getter methods have a similar setup
                - SYNTAX: get <property name> () { ... }
            - NOTE: When using custom getter/setter methods, you do NOT have access to the property variable internally you're trying to change!
                - In this case, I can't use 'this.name', like I could in the constructor
                - The common convention is to use an underscore, followed by the property name instead
                    - (TODO: See why this is later)

                - Ex: set name (value) {
                          this._name = Person.capitalizeWord(value);
                      }
            - Now, when the constructor is called, our custom setter function gets called for 'name', and when we call printGreeting, the custom getter method for 'name' is called
                - See Example 11
            - You can add getters/setters on Objects as well
                - See Example 12

Classes - Part 3
    - Subclasses (inheritance)
    - Syntax: class <Class_Name> extends <Parent_Class>
        - Ex: class Employee extends Person {}
            - If you then do -> var person1 = new Employee('mike'); -> Even just doing this and running your code the way you did before, everything works
                - The subclass will inherit the parent's constructor and class/variables apparently; Look into this later
    - Let's say we now want to make it so that when you make an Employee, you pass in a name and a job, like so -> var person1 = new Employee('mike', 'Developer');
    - We can make a constructor() in the Employee class as well
    - We COULD copy the name code like we did in the Person class, but hat's repeating code
    - SOLUTION: use the super() method
        - super() calls the parent class's constructor method, and acts accordingly
    - Now everything can work as planned, while still adding other customization as well for a specific class
    - We can also add additional functionality to a method by redefining it in the subclass (printGreeting)
    - If you still want to call a method from a parent class, even if the method has been overridden, you can use "super" for that as well
        - See Example 13

Destructuring
    - Let's you extract values from arrays/objects
    - var array = ['first', 'second', 'third'];
        - With destructuring, we can extract the values, and put each value into an individual variable
    - var [a, b, c] = array;
        - This assigns 'first' to a, 'second' to b, and 'third' to c, while still keeping the original array variable
    - console.log(a, b, c); // Displays 'first' 'second' 'third'
    - You can also ignore items in the array if you wanted
        - Ex: Say we didn't want the 'second' element

            - var [a, , c] = array; 
              console.log(a, c); // Displays 'first' 'third'

    - Destructuring objects is very similar, except this time you use '{}', and inside you specify the property(ies) you want from the object

        - Ex: var todo = {
                  description: 'Watch new ES6 section',
                  completed: false
              }

              var {description} = todo;
              console.log(description); // Displays "Watch new ES6 section"

        - You can also rename the property you want as another variable name

            - Ex: var {description: message} = todo;
                  console.log(message); // Displays "Watch new ES6 section"
          
    - How is destructuring actually helpful?
        - A good use for destructuring is for function arguments, and function return values
        - See Example 14

- Babel & ES6 On Heroku
    - git init and npm init, then 'heroku create' to create a new app
    - Added babel and babel-presets-2015
    - .babelrc to use "es2015" plugin
    - babel app/*.js -d dist
        - Compiles our ES6 code to ES5, and puts it in a "dist" folder (-d = destination)
    - Make a "start" script in package.json that starts app from the dist folder
    - Then we just have to commit the changes, then do "git push heroku", and we're done!
        - You can call 'heroku open' to opn the app



                                  Examples
                                  --------
                            
Example 1 - Const with Objects
---------
const CONFIG = {
    PORT: 3000
};

console.log(CONFIG); // Displays { PORT: 3000 }
CONFIG.PORT = 3001;
console.log(CONFIG); // Displays { PORT: 3001 }


Example 2 - Var vs Let -> For-Loop
---------

With var
--------
for(var i = 0; i < 3; i++)
{
    console.log(`For loop: i = ${i}`);
    // Displays
        // For loop: i = 0
        // For loop: i = 1
        // For loop: i = 2
}

console.log(i); // Displays 3

With let
--------
for(let i = 0; i < 3; i++)
{
    console.log(`For loop: i = ${i}`);
    // Displays
        // For loop: i = 0
        // For loop: i = 1
        // For loop: i = 2
}

console.log(i); // Program crashes; 'i' doesn't exist outside the scope!


Example 3 - Let with Functions
---------
function genCallback() {
    let name = "Michael"
    return function() {
        console.log(`Hello ${name}`);
    }
}

genCallback()(); // Displays 'Hello Michael'


Example 4 - Spread Example
---------
function add(a, b) {
    return a + b;
}

var numbers = [4, 22];

console.log(add(1, 4));            // Displays 5
console.log(add(...numbers));      // Displays 26


Example 5 - Rest Example
---------
function greetUsers(...names) {
    names.forEach(function(name) {
        console.log('Hello ' + name);
    });
}

greetUsers('Andrew', 'Mike', 'Jen'); // Displays "Hello Andrew", "Hello Mike", "Hello Jen" on separate lines


Example 6 - One-Liner Arrow Function
---------
// Original function definition
/* function add(a, b) {
    return a + b;
} */

// Arrow Function
var add = (a, b) => a + b;

console.log(add(3, 9));


Example 7 - "This" binding
---------
var person = {
    name: 'Mike',
    likes: ['Movies', 'Programming', 'Running'],
    generateGreeter: function() {
        return () => {
            console.log(this.name);
        }
    }
};

person.generateGreeter()(); // Displays Mike


Example 8 - For...of
---------
var locations = [];
locations.push({
    name: 'Madison',
    weather: 75
});

locations.push({
    name: 'Sun Prairie',
    weather: 73
});

for(let location of locations) {
    console.log(`It's ${location.weather} in ${location.name}`);    // Displays "It's 75 in Madison" and "It's 73 in Sun Prairie" on separate lines
}


Example 9 - Maps: Using other key types
---------
var user = {name: 'Mike'};
myMap.set(user, 'Madison');
console.log(myMap.get(user)); // Displays 'Madison'


Example 10 - Dynamic Property Names
----------
var person = {
    ['hello' + (3 + 2)]: 'I am here'
};

console.log(person.hello5); // Displays "I am here"


Example 11 - Classes -> Getters/Setters
----------
class Person {
    constructor(name) {
        this.name = typeof name === 'string' ? name : 'Anonymous';
    }
    set name (value) {
        this._name = Person.capitalizeWord(value);
    }
    get name () {
        return this._name;
    }
    printGreeting() {
        console.log(`Hi! I'm ${this.name}!`);
    }
    static capitalizeWord(word) {
        return word[0].toUpperCase() + word.slice(1);
    }
}

var person1 = new Person('mike');
person1.printGreeting(); // Displays 'Hi! I'm Mike!'

var person2 = new Person();
person2.printGreeting(); // Displays 'Hi! I'm Anonymous!'


Example 12 - Objects -> Getters/Setters
----------
var obj = {
    set age (val) {
        this._age = val + 10;
    },
    get age() {
        return this._age;
    }
};
obj.age = 21;
console.log(obj.age); // Displays 31


Example 13 - Classes and Inheritance
----------
class Person {
    constructor(name) {
        this.name = typeof name === 'string' ? name : 'Anonymous';
    }
    set name (value) {
        this._name = Person.capitalizeWord(value);
    }
    get name () {
        return this._name;
    }
    printGreeting() {
        console.log(`Hi! I'm ${this.name}!`);
    }
    static capitalizeWord(word) {
        return word[0].toUpperCase() + word.slice(1);
    }
}

class Employee extends Person {
    constructor(name, job = 'Unemployed') {
        super(name);
        this.job = job;
    }
    printGreeting() {
        console.log(`Hi! I'm ${this.name}, and I am a ${this.job}!`);
    }
    callSuperMethod() {
        super.printGreeting();
    }
}

var person1 = new Employee('mike', 'Developer');
person1.name = 'jen';
person1.printGreeting();      // Displays "Hi! I'm Jen, and I am a Developer!"
person1.callSuperMethod();    // Displays "Hi! I'm Jen!"

var person2 = new Person();
person2.printGreeting();      // Displays "Hi! I'm Anonymous!"


Example 14 - Destructuring
----------

    Before Destructuring
    ====================
    var todo = {
        description: 'Watch new ES6 section',
        completed: false
    }

    function getTodoStatus(todo) {
        if(typeof todo.completed === 'boolean') {
            console.log(`Todo is ${todo.completed ? '' : 'not '}completed.`);
        }
        else {
            console.log('Todo error. Not valid');
        }
    }

    getTodoStatus(todo); // Displays 'Todo is not completed.'

    After Destructuring
    ===================
    var todo = {
        description: 'Watch new ES6 section',
        completed: false
    }

    function getTodoStatus({completed}) {
        if(typeof completed === 'boolean') {
            return [`Todo is ${completed ? '' : 'not '}completed.`]
        }
        else {
            return[undefined, {error: 'INVALID_TODO_ITEM'}]
        }
    }

    var [res, err] = getTodoStatus(todo);
    if(err) {
        console.log(err.error); // Displays 'INVALID_TODO_ITEM' when hit
    }
    else {
        console.log(res);       // Displays 'Todo is not completed.' when hit
    }